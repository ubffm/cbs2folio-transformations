[tool.poetry]
name = "cbs2folio-transformations"
version = "0.1.0"
description = ""
authors = ["JensHeinrich <github.com/JensHeinrich>"]
license = "MPL-2.0"

[tool.poetry.dependencies]
python = "^3.10"
rtfparse = "^0.7.8"
beautifulsoup4 = "^4.11.1"
pandas = "^1.5.1"
pydantic = "^2.5.3"
dict2xml = "^1.7.2"
black = "^22.12.0"
xmldiff = "^2.5"
pytest = "^7.2.1"
hypothesis = { extras = ["all"], version = "^6.67.1" }
defusedxml = "^0.7.1"
lxml = "^4.9.2"
pytest-xdist = "^3.2.0"
annotated-types = "^0.5.0"
typing-extensions = "^4.9.0"
pyyaml = "^6.0.2"
numpy = "^2.1.1"

[tool.poetry.dev-dependencies]
lxml = "^4.9.1"
pytest = "^7.2.1"
pydeps = "^1.11.1"

[tool.poetry.group.typechecking.dependencies]
lxml-stubs = "^0.4.0"
flake8 = "^6.1.0"


[tool.poetry.group.dev.dependencies]
poethepoet = "^0.29.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]

log_cli = true
log_cli_level = "CRITICAL"
log_cli_format = "%(message)s"

log_file = "pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

[tool.black]
line-length = 79

[tool.pyright]
venvPath = ".venv"

[tool.isort]
profile = "black"


[tool.poe.tasks.test]
help = "Run the test suite"
cmd = "pytest"

[tool.poe.tasks.format]
help = "Run all formatters"
sequence = [{ ref = "_autoflake" }, { ref = "_isort" }, { ref = "_black" }]
args = [{ name = "target", positional = true, default = ".", multiple = true }]

[tool.poe.tasks._isort]
cmd = "isort ${target}"
args = [{ name = "target", positional = true, default = ".", multiple = true }]

[tool.poe.tasks._black]
cmd = "black ${target}"
args = [{ name = "target", positional = true, default = ".", multiple = true }]

[tool.poe.tasks._autoflake]
cmd = "autoflake --recursive --in-place ${target}"
args = [{ name = "target", positional = true, default = ".", multiple = true }]

[tool.poe.tasks.mypy]
help = "Run mypy"
cmd = "mypy ${target}"
args = [
    { name = "target", positional = true, default = "src tests", multiple = true },
]

[tool.poe.tasks.pyright]
help = "Run pyright"
cmd = "pyright ${target}"
args = [
    { name = "target", positional = true, default = "src tests", multiple = true },
]

[tool.poe.tasks.type_check]
help = "Run all type-checkers"
args = [
    { name = "target", positional = true, default = "src tests", multiple = true },
]
sequence = [{ ref = "pyright ${target}" }, { ref = "mypy ${target}" }]
ignore_fail = "return_non_zero"

[tool.poe.tasks.list_outdated]
help = "List outdated packages"
cmd = "poetry show --outdated --top-level"

[tool.poe.tasks.list_all_outdated]
help = "List outdated packages"
cmd = "poetry show --outdated"

[tool.poe.tasks.lock]
help = "Lock installed package versions"
cmd = "poetry lock"

[tool.poe.tasks.export_requirements]
help = "Export the package requirements as requirements.txt"
cmd = "poetry export --format=requirements.txt --output=requirements.txt"

[tool.poe.tasks.export_dev_requirements]
help = "Export the package requirements including the dev group as requirements_dev.txt"
cmd = "poetry export --format=requirements.txt --with=dev --output=requirements_dev.txt"

[tool.poe.tasks.export]
help = "Export all package requirements"
sequence = [
    { ref = "export_requirements" },
    { ref = "export_dev_requirements" },
]
